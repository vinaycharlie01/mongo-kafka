DROP STREAM TEMPORAL_STREAM_10MIN;
 DROP STREAM TEMPORAL_STREAM_5MIN;
 DROP STREAM TEMPORAL_STREAM_1MIN;
 DROP TABLE TEMPORAL_TABLE_10MIN;
 DROP TABLE TEMPORAL_TABLE_5MIN;
 DROP TABLE TEMPORAL_TABLE_1MIN;
 DROP STREAM TEMPORAL_CORRELATION;
 DROP STREAM CORRELATIONDATA;
 CREATE STREAM CORRELATIONDATA
         (Signature varchar,
         METADATAUUID varchar,
         AUTOMATIONCODE varchar,
         RELATEDAUTOMATIONCODE varchar,
         CorrelationID varchar,
         windowlen INTEGER)
     WITH (KAFKA_TOPIC='ksqlCorrelationData', PARTITIONS=6, VALUE_FORMAT='JSON');
 CREATE STREAM TEMPORAL_CORRELATION (CORRELATIONID STRING, UUIDS ARRAY<STRING>, SIGNATURES ARRAY<STRING>, W_COUNT BIGINT)
     WITH (KAFKA_TOPIC='ksqlTemporalCorrelation', PARTITIONS=6, REPLICAS=1, VALUE_FORMAT='JSON');
 CREATE TABLE TEMPORAL_TABLE_10MIN
     WITH (KAFKA_TOPIC='ksqlTemporal10Min', PARTITIONS=6, REPLICAS=1) AS
     SELECT
         CORRELATIONID AS KEY,
         AS_VALUE(CORRELATIONID) AS CORRELATIONID,
         COLLECT_SET(METADATAUUID) as UUIDS,
         COLLECT_SET(SIGNATURE) as SIGNATURES,
         COUNT(*) AS W_COUNT
     FROM CORRELATIONDATA
     WINDOW SESSION ( 10 MINUTES )
     WHERE WINDOWLEN = 10
     GROUP BY CORRELATIONID
     EMIT CHANGES;
 CREATE STREAM TEMPORAL_STREAM_10MIN
         (CORRELATIONID STRING, UUIDS ARRAY<STRING>, SIGNATURES ARRAY<STRING>, W_COUNT BIGINT)
     WITH (KAFKA_TOPIC='ksqlTemporal10Min',  PARTITIONS=6, VALUE_FORMAT='JSON');
 INSERT INTO TEMPORAL_CORRELATION
     SELECT CORRELATIONID, UUIDS, SIGNATURES, W_COUNT
     FROM TEMPORAL_STREAM_10MIN
     WHERE W_COUNT > 1;
 CREATE TABLE TEMPORAL_TABLE_15MIN
     WITH (KAFKA_TOPIC='ksqlTemporal15Min', PARTITIONS=6, REPLICAS=1) AS
     SELECT
         CORRELATIONID AS KEY,
         AS_VALUE(CORRELATIONID) AS CORRELATIONID,
         COLLECT_SET(CORRELATIONDATA.METADATAUUID) as UUIDS,
         COLLECT_SET(CORRELATIONDATA.SIGNATURE) as SIGNATURES,
         COUNT(*) AS W_COUNT
     FROM CORRELATIONDATA
              WINDOW SESSION ( 15 MINUTES )
     WHERE (CORRELATIONDATA.WINDOWLEN = 15)
     GROUP BY CORRELATIONDATA.CORRELATIONID
     EMIT CHANGES;
 CREATE STREAM TEMPORAL_STREAM_15MIN
         (CORRELATIONID STRING, UUIDS ARRAY<STRING>, SIGNATURES ARRAY<STRING>, W_COUNT BIGINT)
     WITH (KAFKA_TOPIC='ksqlTemporal15Min',  PARTITIONS=6, VALUE_FORMAT='JSON');
 INSERT INTO TEMPORAL_CORRELATION
     SELECT CORRELATIONID, UUIDS, SIGNATURES, W_COUNT
     FROM TEMPORAL_STREAM_15MIN
     WHERE W_COUNT > 1;
 CREATE TABLE TEMPORAL_TABLE_5MIN
     WITH (KAFKA_TOPIC='ksqlTemporal5Min', PARTITIONS=6, REPLICAS=1) AS
     SELECT
         CORRELATIONID AS KEY,
         AS_VALUE(CORRELATIONID) AS CORRELATIONID,
         COLLECT_SET(CORRELATIONDATA.METADATAUUID) as UUIDS,
         COLLECT_SET(CORRELATIONDATA.SIGNATURE) as SIGNATURES,
         COUNT(*) AS W_COUNT
     FROM CORRELATIONDATA
              WINDOW SESSION ( 5 MINUTES )
     WHERE (CORRELATIONDATA.WINDOWLEN = 5)
     GROUP BY CORRELATIONDATA.CORRELATIONID
     EMIT CHANGES;
 CREATE STREAM TEMPORAL_STREAM_5MIN
         (CORRELATIONID STRING, UUIDS ARRAY<STRING>, SIGNATURES ARRAY<STRING>, W_COUNT BIGINT)
     WITH (KAFKA_TOPIC='ksqlTemporal5Min',  PARTITIONS=6, VALUE_FORMAT='JSON');
 INSERT INTO TEMPORAL_CORRELATION
     SELECT CORRELATIONID, UUIDS, SIGNATURES, W_COUNT
     FROM TEMPORAL_STREAM_5MIN
     WHERE W_COUNT > 1;
 CREATE TABLE TEMPORAL_TABLE_1MIN
     WITH (KAFKA_TOPIC='ksqlTemporal1Min', PARTITIONS=6, REPLICAS=1) AS
     SELECT
         CORRELATIONID AS KEY,
         AS_VALUE(CORRELATIONID) AS CORRELATIONID,
         COLLECT_SET(CORRELATIONDATA.METADATAUUID) as UUIDS,
         COLLECT_SET(CORRELATIONDATA.SIGNATURE) as SIGNATURES,
         COUNT(*) AS W_COUNT
     FROM CORRELATIONDATA
              WINDOW SESSION ( 1 MINUTES )
     WHERE (CORRELATIONDATA.WINDOWLEN = 1)
     GROUP BY CORRELATIONDATA.CORRELATIONID
     EMIT CHANGES;
 CREATE STREAM TEMPORAL_STREAM_1MIN
         (CORRELATIONID STRING, UUIDS ARRAY<STRING>, SIGNATURES ARRAY<STRING>, W_COUNT BIGINT)
     WITH (KAFKA_TOPIC='ksqlTemporal1Min',  PARTITIONS=6, VALUE_FORMAT='JSON');
 INSERT INTO TEMPORAL_CORRELATION
     SELECT CORRELATIONID, UUIDS, SIGNATURES, W_COUNT
     FROM TEMPORAL_STREAM_1MIN
     WHERE W_COUNT > 1;





